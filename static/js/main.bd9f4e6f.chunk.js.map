{"version":3,"sources":["utils/helpers.js","selectors/authedUserId.js","components/PrivateRoute.js","containers/PrivateRoute.js","hoc/to-js.js","selectors/users.js","actions/authedUserId.js","constants.js","components/LoginPage.js","containers/LoginPage.js","selectors/questions.js","components/menuBar/MyAccountMenuItem.js","containers/menuBar/MyAccountMenuItem.js","components/menuBar/NavMenuItems.js","containers/menuBar/NavMenuItems.js","components/menuBar/SidebarMenuItem.js","components/menuBar/TopBar.js","containers/menuBar/TopBar.js","components/pageContainers/PageContent.js","components/pageContainers/WithSidebar.js","components/pageContainers/PageContainer.js","components/shared/CardContainer.js","components/homePage/PreviewCard.js","containers/homePage/PreviewCard.js","components/homePage/PreviewCardList.js","components/homePage/HomePage.js","containers/homePage/HomePage.js","selectors/status.js","utils/_DATA.js","utils/api.js","actions/users.js","actions/questions.js","actions/status.js","actions/thunk/setVote.js","components/pollPage/PollCard.js","containers/pollPage/PollCard.js","states/status.js","components/pollPage/OptionPercentage.js","components/pollPage/ResultsCard.js","containers/pollPage/ResultsCard.js","components/NotFoundPage.js","components/pollPage/PollPage.js","containers/pollPage/PollPage.js","actions/thunk/setQuestion.js","components/AddQuestionPage.js","containers/AddQuestionPage.js","components/leaderboardPage/LeaderCard.js","components/leaderboardPage/LeaderboardPage.js","containers/leaderboardPage/LeaderboardPage.js","components/Navigation.js","components/App.js","actions/thunk/handleInitialData.js","containers/App.js","reducers/authedUserId.js","reducers/questions.js","reducers/status.js","reducers/users.js","reducers/index.js","middleware/index.js","index.js"],"names":["getBasename","basename","settings","window","location","hostname","concat","addBasenameToUrl","url","indexOf","replace","expectString","string","TypeError","expectNumber","number","allowNaN","arguments","length","undefined","isNaN","expectMap","map","isImmutable","Map","isMap","expectList","list","List","isList","getAuthedUserId","state","get","PrivateRoute","_ref","Component","component","authedUserId","rest","Object","objectWithoutProperties","react_default","a","createElement","Route","assign","render","props","Redirect","to","pathname","from","defaultProps","connect","toJS","WrappedComponent","wrappedComponentProps","propsJS","entries","reduce","newProps","wrappedComponentProp","Iterable","isIterable","user","userMap","answers","avatarURL","id","name","questions","users","descendingByScore","b","scoreA","count","getUsers","toList","getUserById","userId","getLeaders","sort","leader","answered","asked","LOGIN","LOGOUT","logout","type","COLOR","LoginForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","selectedUserId","onSelect","event","value","setState","onSubmit","login","preventDefault","formatUsers","key","text","image","src","avatar","bind","assertThisInitialized","_this$props","color","Grid","verticalAlign","textAlign","Column","Segment","attached","className","secondary","Form","size","Image","centered","Select","fluid","selection","options","placeholder","loading","onChange","Button","disabled","dispatch","payload","LoginPage","option","optionMap","votes","question","questionMap","author","optionOne","optionTwo","timestamp","descendingByTimestamp","isAnswered","_question","includes","getAnsweredQuestions","filter","getUnansweredQuestions","MyAccountMenuItem","userName","Menu","Item","position","Responsive","onlyMobile","spaced","minWidth","onClick","onKeyPress","role","tabIndex","style","cursor","_user","NavMenuItems","react","as","NavLink","exact","SidebarMenuItem","toggle","Icon","TopBar","toggleSidebar","inverted","Container","menuBar_SidebarMenuItem","containers_menuBar_NavMenuItems","containers_menuBar_MyAccountMenuItem","PageContent","children","containers_menuBar_TopBar","Header","dividing","WithSidebar","sideBarVisible","currentState","Sidebar","Pushable","animation","width","visible","vertical","Pusher","dimmed","pageContainers_PageContent","PageContainer","onlyComputer","onlyTablet","pageContainers_WithSidebar","CardContainer","header","trim","block","columns","divided","GridRow","GridColumn","PreviewCard","description","shared_CardContainer","Link","basic","PreviewCardList","altText","Message","stackable","doubling","containers_homePage_PreviewCard","HomePage","answeredQuestions","unansweredQuestions","menuItem","Tab","Pane","homePage_PreviewCardList","pageContainers_PageContainer","menu","align","tabular","panes","getPanes","getStatus","sarahedo","8xf0y6ziyjabvozdd253nd","6ni6ok3ym7mf1p33lnez","am8ehyc8byjqgar0jgpub9","loxhs1bqm25b708cmbf3g","tylermcginnis","vthrdm985a262al8qx3do","xj352vofupe1dqz9emx13r","johndoe","_saveQuestion","Promise","res","rej","authedUser","formattedQuestion","optionOneText","optionTwoText","Math","random","toString","substring","Date","now","formatQuestion","setTimeout","objectSpread","defineProperty","getInitialData","all","then","_ref2","slicedToArray","saveQuestion","saveQuestionAnswer","questionId","optionKey","qid","answer","_saveQuestionAnswer","addAnswerToUser","addQuestionToUser","initUsers","addQuestion","addUserToQuestionVotes","initQuestions","setBusyState","setSuccessState","setReadyState","setVote","showLoading","hideLoading","PollCard","handleChange","handleSubmit","_this$props2","busy","Radio","label","checked","OptionPercentage","messageColor","overall","voted","Label","circular","Content","Progress","precision","progress","total","ResultsCard","countAllVotes","getResult","results","getResults","result","pollPage_OptionPercentage","NotFoundPage","PollPage","containers_pollPage_ResultsCard","containers_pollPage_PollCard","components_NotFoundPage","match","getQuestionById","params","setQuestion","AddQuestionPage","handleBlur","currentTarget","isEmpty","constructor","_this$state","success","_this$state2","Input","onBlur","Divider","horizontal","LeaderCard","segmentColor","highlight","Row","ribbon","Table","unstackable","Body","Cell","LeaderboardPage","leaders","leaderboardPage_LeaderCard","Navigation","BrowserRouter","Switch","path","containers_PrivateRoute","App","loadInitialData","document","title","build","components_Navigation","handleInitialData","reducer","action","fromJS","merge","Error","mergeIn","questionsMap","updateIn","push","usersMap","reducers","loadingBar","loadingBarReducer","status","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","middleware","root","getElementById","ReactDOM","es","containers_App"],"mappings":"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","file":"static/js/main.bd9f4e6f.chunk.js","sourcesContent":["// @flow\nimport {\n  isImmutable,\n  List, type List as TList,\n  Map, type Map as TMap,\n} from 'immutable';\nimport settings from '../settings';\n\nexport function getBasename(): string {\n  const basename: {\n    [key: string]: string\n  } = settings.basename || {};\n  return (basename[window.location.hostname])\n    ? `/${basename[window.location.hostname]}/`\n    : '/';\n}\n\nexport function addBasenameToUrl(url: string): string {\n  const basename: string = getBasename();\n  return (url.indexOf(basename) === -1)\n    ? basename + url.replace(/^\\/+/g, '')\n    : url;\n}\n\nexport const isMap = (map: any): boolean => (\n  isImmutable(map) && Map.isMap(map)\n);\n\nexport const isList = (list: any): boolean => (\n  isImmutable(list) && List.isList(list)\n);\n\nexport const expectString = (string: any): string => {\n  if (typeof string === 'string') {\n    return string;\n  }\n  throw new TypeError(`unexpected type: ${typeof string} - expected string`);\n};\n\nexport const expectNumber = (number: any, allowNaN: boolean = false): number => {\n  if (typeof number === 'number') {\n    (number: number); // eslint-disable-line no-unused-expressions\n  } else {\n    throw new TypeError(`unexpected type: ${typeof number} - expected number`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  if (!allowNaN && isNaN(number)) {\n    throw new TypeError('number is not a number');\n  }\n  return number;\n};\n\nexport const expectMap = (map: any): TMap<any, any> => {\n  if (map && isMap(map)) {\n    return map;\n  }\n  throw new TypeError(`unexpected type: ${typeof map} - expected map`);\n};\n\nexport const expectList = (list: any): TList<any> => {\n  if (list && isList(list)) {\n    return list;\n  }\n  throw new TypeError(`unexpected type: ${typeof list} - expected list`);\n};\n","// @flow\nimport { type StateMap } from '../types';\nimport { expectString } from '../utils/helpers';\n\nexport const getAuthedUserId = (state: StateMap): string => (\n  expectString(state.get('authedUserId'))\n);\n\nexport default undefined;\n","// @flow\nimport React, { type Element } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n// Private Route concept from here: https://reacttraining.com/react-router/web/example/auth-workflow\n\ntype Props = {\n  component: () => Element<any>,\n  authedUserId?: string,\n};\n\nconst PrivateRoute = ({\n  component: Component,\n  authedUserId,\n  ...rest\n}: Props): Element<any> => (\n  <Route\n    {...rest}\n    render={props => (\n      authedUserId !== ''\n        ? (<Component {...props} />)\n        : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: props.location },\n            }}\n          />\n        ))\n    }\n  />\n);\n\nPrivateRoute.defaultProps = {\n  authedUserId: '',\n};\n\nexport default PrivateRoute;\n","// @flow\nimport { connect } from 'react-redux';\nimport { getAuthedUserId } from '../selectors/authedUserId';\nimport PrivateRoute from '../components/PrivateRoute';\nimport {\n  type StateMap,\n} from '../types';\n\nconst mapStateToProps = (state: StateMap): {\n  authedUserId: string,\n} => ({\n  authedUserId: getAuthedUserId(state),\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { Iterable } from 'immutable';\n\nconst toJS = WrappedComponent => (wrappedComponentProps) => {\n  const KEY = 0;\n  const VALUE = 1;\n\n  const propsJS = Object.entries(wrappedComponentProps).reduce(\n    (newProps, wrappedComponentProp) => {\n      // eslint-disable-next-line no-param-reassign\n      newProps[wrappedComponentProp[KEY]] = Iterable.isIterable(\n        wrappedComponentProp[VALUE],\n      )\n        ? wrappedComponentProp[VALUE].toJS()\n        : wrappedComponentProp[VALUE];\n      return newProps;\n    },\n    {},\n  );\n\n  return <WrappedComponent {...propsJS} />;\n};\n\nexport default toJS;\n","// @flow\nimport {\n  type List,\n  Map,\n} from 'immutable';\nimport {\n  type AnswersMap,\n  type LeaderMap,\n  type StateMap,\n  type IUserMap,\n  type UserMap,\n  type UsersMap,\n} from '../types';\nimport {\n  expectList,\n  expectMap,\n  expectString,\n} from '../utils/helpers';\n\nexport const user = (userMap: UserMap): IUserMap => ({\n  answers: (expectMap(userMap.get('answers')): AnswersMap),\n  avatarURL: expectString(userMap.get('avatarURL')),\n  id: expectString(userMap.get('id')),\n  name: expectString(userMap.get('name')),\n  questions: (expectList(userMap.get('questions')): List<string>),\n});\n\nconst users = (state: StateMap): UsersMap => (\n  (expectMap(state.get('users')): UsersMap)\n);\n\n/* - - - - - - - */\n\nconst descendingByScore = (a: UserMap, b: UserMap): number => {\n  const scoreA: number = user(a).answers.count() + user(a).questions.count();\n  const scoreB: number = user(b).answers.count() + user(b).questions.count();\n  return scoreB - scoreA;\n};\n\nexport const getUsers = (state: StateMap): List<UserMap> => (\n  users(state).toList()\n);\n\nexport const getUserById = (state: StateMap, userId: string): UserMap | void => (\n  users(state).get(userId)\n);\n\nexport const getLeaders = (state: StateMap): List<LeaderMap> => (\n  users(state)\n    .sort(descendingByScore)\n    .toList()\n    .map((userMap) => {\n      const leader: IUserMap = user(userMap);\n      return Map({\n        answered: leader.answers.count(),\n        asked: leader.questions.count(),\n        avatarURL: leader.avatarURL,\n        id: leader.id,\n        name: leader.name,\n      });\n    })\n);\n","// @flow\nimport { type Action } from '../types';\n\ntype Login = 'authedUserId/LOGIN'\ntype Logout = 'authedUserId/LOGOUT'\n\nexport const LOGIN: Login = 'authedUserId/LOGIN';\nexport const LOGOUT: Logout = 'authedUserId/LOGOUT';\n\nexport type LoginPayload = {\n  id: string\n}\n\nexport type LoginAction = Action<Login, LoginPayload>\nexport type LogoutAction = Action<Logout>\n\nexport type AuthedUserIdAction =\n  | LoginAction\n  | LogoutAction\n\nexport const login = (id: string): LoginAction => ({\n  type: LOGIN,\n  payload: {\n    id,\n  },\n});\n\nexport const logout = (): LogoutAction => ({\n  type: LOGOUT,\n});\n","// @flow\n\nexport const COLOR = {\n  UI_GENERIC: 'teal',\n};\n\nexport default undefined;\n","// @flow\nimport React, { Component, type Element } from 'react';\nimport { Redirect, type LocationShape } from 'react-router-dom';\nimport {\n  Button,\n  Form,\n  type FormProps,\n  Grid,\n  Image,\n  Segment,\n  Select,\n} from 'semantic-ui-react';\nimport { COLOR } from '../constants';\nimport { type User } from '../types';\nimport { addBasenameToUrl } from '../utils/helpers';\n\ntype Props = {\n  authedUserId?: string,\n  location?: { state: { from: LocationShape } },\n  login: (selectedUserId: string) => void,\n  users: User[],\n};\n\ntype State = {\n  selectedUserId: string,\n};\n\ntype FormattedUser = {\n  key: string,\n  value: string,\n  text: string,\n  image: { src: string, avatar: boolean },\n};\n\ninterface IFormProps extends FormProps {\n  value: string,\n}\n\nclass LoginForm extends Component<Props, State> {\n  static defaultProps = {\n    authedUserId: '',\n    location: undefined,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.onSelect = this.onSelect.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  state = {\n    selectedUserId: '',\n  };\n\n  onSelect = (event: SyntheticEvent<HTMLSelectElement>, { value }: IFormProps): void => {\n    const selectedUserId = value;\n    this.setState({ selectedUserId });\n  };\n\n  onSubmit = (event: SyntheticEvent<HTMLSelectElement>): void => {\n    const { login } = this.props;\n    const { selectedUserId } = this.state;\n    event.preventDefault();\n    login(selectedUserId);\n  };\n\n  formatUsers = (users: User[]): FormattedUser[] => (\n    users.map(user => ({\n      key: user.id,\n      value: user.id,\n      text: user.name,\n      image: {\n        src: addBasenameToUrl(user.avatarURL),\n        avatar: true,\n      },\n    }))\n  );\n\n  render(): Element<any> {\n    const { authedUserId, location, users } = this.props;\n    const { selectedUserId } = this.state;\n\n    const { from } = location && location.state ? location.state : { from: ({ pathname: '/' }: LocationShape) };\n    const color: string = COLOR.UI_GENERIC;\n\n    if (authedUserId) {\n      return <Redirect to={from} />;\n    }\n\n    return (\n      <Grid\n        id=\"login-page\"\n        verticalAlign=\"middle\"\n        textAlign=\"center\"\n      >\n        <Grid.Column>\n          <Segment attached=\"top\" className=\"title\" secondary>\n            <h3>Welcome to the Would You Rather App!</h3>\n            <p>Please sign in to continue</p>\n          </Segment>\n          <Segment attached className=\"content\">\n            <Form size=\"large\" onSubmit={this.onSubmit}>\n              <Image\n                centered\n                size=\"small\"\n                src={addBasenameToUrl('/images/react-redux.jpg')}\n              />\n              <h3><p>Sign in</p></h3>\n              <Select\n                fluid\n                selection\n                options={this.formatUsers(users)}\n                placeholder=\"Select User\"\n                loading={users.length === 0}\n                onChange={this.onSelect}\n              />\n              <Button\n                color={color}\n                fluid\n                size=\"large\"\n                disabled={selectedUserId === ''}\n              >\n                Login\n              </Button>\n            </Form>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default LoginForm;\n","// @flow\nimport { connect } from 'react-redux';\nimport { type List } from 'immutable';\nimport toJS from '../hoc/to-js';\nimport { getAuthedUserId } from '../selectors/authedUserId';\nimport { getUsers } from '../selectors/users';\nimport { login, type LoginAction } from '../actions/authedUserId';\nimport LoginPage from '../components/LoginPage';\nimport {\n  type Dispatch,\n  type StateMap,\n  type UserMap,\n} from '../types';\n\ntype Action =\n  | LoginAction\n\nconst mapStateToProps = (state: StateMap): {\n  authedUserId: string,\n  users: List<UserMap>,\n} => ({\n  authedUserId: getAuthedUserId(state),\n  users: getUsers(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  login: (userId: string): void => dispatch(login(userId)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(toJS(LoginPage));\n","// @flow\nimport { type List } from 'immutable';\nimport { getAuthedUserId } from './authedUserId';\nimport {\n  type IQuestionOptionMap,\n  type QuestionOptionMap,\n  type IQuestionMap,\n  type QuestionsMap,\n  type QuestionMap,\n  type StateMap,\n} from '../types';\nimport {\n  expectList,\n  expectMap,\n  expectNumber,\n  expectString,\n} from '../utils/helpers';\n\nexport const option = (optionMap: QuestionOptionMap): IQuestionOptionMap => ({\n  text: expectString(optionMap.get('text')),\n  votes: (expectList(optionMap.get('votes')): List<string>),\n});\n\nexport const question = (questionMap: QuestionMap): IQuestionMap => ({\n  author: expectString(questionMap.get('author')),\n  id: expectString(questionMap.get('id')),\n  optionOne: (expectMap(questionMap.get('optionOne')): QuestionOptionMap),\n  optionTwo: (expectMap(questionMap.get('optionTwo')): QuestionOptionMap),\n  timestamp: expectNumber(questionMap.get('timestamp')),\n});\n\nconst questions = (state: StateMap): QuestionsMap => (\n  (expectMap(state.get('questions')): QuestionsMap)\n);\n\n/* - - - - - - - */\n\nconst descendingByTimestamp = (a: QuestionMap, b: QuestionMap): number => (\n  question(b).timestamp - question(a).timestamp\n);\n\nexport const isAnswered = (questionMap: QuestionMap, userId: string): boolean => {\n  const { optionOne, optionTwo } = question(questionMap);\n  return option(optionOne).votes.includes(userId)\n    || option(optionTwo).votes.includes(userId);\n};\n\nexport const getAnsweredQuestions = (state: StateMap): List<QuestionMap> => {\n  const userId: string = getAuthedUserId(state);\n  return questions(state)\n    .filter(questionMap => isAnswered(questionMap, userId))\n    .sort(descendingByTimestamp)\n    .toList();\n};\n\nexport const getUnansweredQuestions = (state: StateMap): List<QuestionMap> => {\n  const userId: string = getAuthedUserId(state);\n  return questions(state)\n    .filter(questionMap => !isAnswered(questionMap, userId))\n    .sort(descendingByTimestamp)\n    .toList();\n};\n\nexport const getQuestionById = (state: StateMap, questionId: string): QuestionMap | void => (\n  questions(state).get(questionId)\n);\n","// @flow\nimport React, { type Element } from 'react';\nimport {\n  Image,\n  Menu,\n  Responsive,\n} from 'semantic-ui-react';\nimport { addBasenameToUrl } from '../../utils/helpers';\n\ntype Props = {\n  avatarURL: string,\n  logout: () => void,\n  userName: string,\n};\n\nconst MyAccountMenuItem = ({ avatarURL, logout, userName }: Props): Element<any> => (\n  <Menu.Item position=\"right\">\n    <Responsive {...Responsive.onlyMobile}>\n      <Image avatar src={addBasenameToUrl(avatarURL)} spaced />\n      {userName}\n    </Responsive>\n    <Responsive minWidth=\"768\">{/* onlyTablet and up */}\n      <span>\n        Hello, {userName}\n        <Image avatar src={addBasenameToUrl(avatarURL)} spaced />\n        <span\n          onClick={logout}\n          onKeyPress={logout}\n          role=\"button\"\n          tabIndex=\"0\"\n          style={{\n            cursor: 'pointer',\n          }}\n        >\n          Logout\n        </span>\n      </span>\n    </Responsive>\n  </Menu.Item>\n);\n\nexport default MyAccountMenuItem;\n","// @flow\nimport { connect } from 'react-redux';\nimport { getAuthedUserId } from '../../selectors/authedUserId';\nimport {\n  getUserById,\n  user,\n} from '../../selectors/users';\nimport {\n  logout,\n  type LogoutAction,\n} from '../../actions/authedUserId';\nimport MyAccountMenuItem from '../../components/menuBar/MyAccountMenuItem';\nimport {\n  type Dispatch,\n  type StateMap,\n  type UserMap,\n} from '../../types';\nimport { expectMap } from '../../utils/helpers';\n\ntype Action =\n  | LogoutAction\n\nconst mapStateToProps = (state: StateMap): {\n  avatarURL: string,\n  name: string,\n} => {\n  const authedUserId: string = getAuthedUserId(state);\n  const userMap: UserMap = expectMap(getUserById(state, authedUserId));\n  const { avatarURL, name } = user(userMap);\n  return {\n    avatarURL,\n    name,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  logout: (): void => dispatch(logout()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MyAccountMenuItem);\n","// @flow\nimport React, { type Element, Fragment } from 'react';\nimport { Menu, Responsive } from 'semantic-ui-react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  logout: () => void,\n};\n\nconst NavMenuItems = ({ logout }: Props): Element<any> => (\n  <Fragment>\n    <Menu.Item as={NavLink} exact to=\"/\">\n      Home\n    </Menu.Item>\n\n    <Menu.Item as={NavLink} to=\"/add\">\n      New Question\n    </Menu.Item>\n\n    <Menu.Item as={NavLink} to=\"/leaderboard\">\n      Leaderboard\n    </Menu.Item>\n\n    <Responsive {...Responsive.onlyMobile}>\n      <Menu.Item as=\"a\" onClick={logout}>\n        Sign out\n      </Menu.Item>\n    </Responsive>\n  </Fragment>\n);\n\nexport default NavMenuItems;\n","// @flow\nimport { connect } from 'react-redux';\nimport {\n  logout,\n  type LogoutAction,\n} from '../../actions/authedUserId';\nimport NavMenuItems from '../../components/menuBar/NavMenuItems';\nimport { type Dispatch } from '../../types';\n\ntype Action =\n  | LogoutAction\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  logout: (): void => dispatch(logout()),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(NavMenuItems);\n","// @flow\nimport React, { type Element } from 'react';\nimport { Menu, Icon } from 'semantic-ui-react';\n\ntype Props = {\n  toggle: () => void,\n};\n\nconst SidebarMenuItem = ({ toggle }: Props): Element<any> => (\n  <Menu.Item onClick={toggle}>\n    <Icon name=\"sidebar\" size=\"large\" />\n  </Menu.Item>\n);\n\nexport default SidebarMenuItem;\n","// @flow\nimport React, { type Element } from 'react';\nimport { Container, Menu } from 'semantic-ui-react';\nimport MyAccountMenuItem from '../../containers/menuBar/MyAccountMenuItem';\nimport NavMenuItems from '../../containers/menuBar/NavMenuItems';\nimport SidebarMenuItem from './SidebarMenuItem';\n\ntype Props = {\n  authedUserId?: string,\n  toggleSidebar?: () => void,\n};\n\nconst TopBar = ({ authedUserId, toggleSidebar }: Props): Element<any> => (\n  <Menu id=\"topbar\" secondary size=\"large\" color=\"teal\" inverted>\n    <Container>\n      {toggleSidebar\n        ? (<SidebarMenuItem toggle={toggleSidebar} />)\n        : (<NavMenuItems />)}\n      {authedUserId && <MyAccountMenuItem />}\n    </Container>\n  </Menu>\n);\n\nTopBar.defaultProps = {\n  authedUserId: '',\n  toggleSidebar: undefined,\n};\n\nexport default TopBar;\n","// @flow\nimport { connect } from 'react-redux';\nimport { getAuthedUserId } from '../../selectors/authedUserId';\nimport TopBar from '../../components/menuBar/TopBar';\nimport { type StateMap } from '../../types';\n\nconst mapStateToProps = (state: StateMap): {\n  authedUserId: string,\n} => ({\n  authedUserId: getAuthedUserId(state),\n});\n\nexport default connect(\n  mapStateToProps,\n)(TopBar);\n","// @flow\nimport React, { type Node } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\nimport TopBar from '../../containers/menuBar/TopBar';\nimport { COLOR } from '../../constants';\n\ntype Props = {\n  children: Node,\n  className?: string,\n  id?: string,\n  toggleSidebar?: () => void,\n};\n\nconst PageContent = ({\n  children,\n  className,\n  id,\n  toggleSidebar,\n}: Props) => {\n  const color = COLOR.UI_GENERIC;\n  return (\n    <div>\n      <TopBar toggleSidebar={toggleSidebar} />\n      <Header as=\"div\" dividing color={color} />\n      <Container id={id} className={className}>\n        {children}\n      </Container>\n    </div>\n  );\n};\n\nPageContent.defaultProps = {\n  className: undefined,\n  id: undefined,\n  toggleSidebar: undefined,\n};\n\nexport default PageContent;\n","// @flow\nimport React, { Component, type Element, type Node } from 'react';\nimport { Menu, Sidebar } from 'semantic-ui-react';\nimport PageContent from './PageContent';\nimport NavMenuItems from '../../containers/menuBar/NavMenuItems';\n\ntype Props = {\n  children: Node,\n  className?: string,\n  id?: string,\n};\n\ntype State = {\n  sideBarVisible: boolean,\n};\n\nclass WithSidebar extends Component<Props, State> {\n  static defaultProps = {\n    className: undefined,\n    id: undefined,\n  };\n\n  constructor(props: Props): void {\n    super(props);\n    this.toggleSidebar = this.toggleSidebar.bind(this);\n  }\n\n  state = {\n    sideBarVisible: false,\n  };\n\n  toggleSidebar: () => void;\n\n  toggleSidebar(): void {\n    this.setState(currentState => ({\n      sideBarVisible: !currentState.sideBarVisible,\n    }));\n  }\n\n  render(): Element<any> {\n    const { sideBarVisible } = this.state;\n    const { children } = this.props;\n    return (\n      <Sidebar.Pushable>\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          width=\"thin\"\n          visible={sideBarVisible}\n          vertical\n          inverted\n        >\n          <NavMenuItems />\n        </Sidebar>\n        <Sidebar.Pusher\n          id=\"sidebar\"\n          dimmed={sideBarVisible}\n          onClick={sideBarVisible ? this.toggleSidebar : null}\n        >\n          <PageContent toggleSidebar={this.toggleSidebar} {...this.props}>\n            {children}\n          </PageContent>\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    );\n  }\n}\n\nexport default WithSidebar;\n","// @flow\nimport React, { type Element, Fragment, type Node } from 'react';\nimport { Responsive } from 'semantic-ui-react';\nimport PageContent from './PageContent';\nimport WithSidebar from './WithSidebar';\n\ntype Props = {\n  children: Node,\n};\n\nconst PageContainer = (props: Props): Element<any> => {\n  const { children } = props;\n  return (\n    <Fragment>\n      <Responsive {...Responsive.onlyComputer}>\n        <PageContent {...props}>{children}</PageContent>\n      </Responsive>\n\n      <Responsive {...Responsive.onlyTablet}>\n        <PageContent {...props}>{children}</PageContent>\n      </Responsive>\n\n      <Responsive {...Responsive.onlyMobile}>\n        <WithSidebar {...props}>{children}</WithSidebar>\n      </Responsive>\n    </Fragment>\n  );\n};\n\nexport default PageContainer;\n","// @flow\nimport React, { type Element, type Node } from 'react';\nimport {\n  GridColumn,\n  Container,\n  Grid,\n  Header,\n  Image,\n  GridRow,\n  Segment,\n} from 'semantic-ui-react';\nimport { addBasenameToUrl } from '../../utils/helpers';\n\ntype Props = {\n  avatarURL: string,\n  children: Node,\n  className?: string,\n  header: string,\n  id?: string,\n};\n\nconst CardContainer = ({\n  avatarURL,\n  children,\n  className,\n  header,\n  id,\n}: Props): Element<any> => (\n  <div id={id} className={`${className || ''} card`.trim()}>\n    <Header as=\"h3\" block attached=\"top\">\n      <span>\n        {header}\n        <Image\n          className=\"small-avatar\"\n          avatar\n          src={addBasenameToUrl(avatarURL)}\n          size=\"mini\"\n          centered\n          verticalAlign=\"middle\"\n        />\n      </span>\n    </Header>\n    <Segment attached>\n      <Grid columns={2} divided>\n        <GridRow>\n          <GridColumn className=\"avatar-container\">\n            <Image\n              className=\"big-avatar\"\n              avatar\n              src={addBasenameToUrl(avatarURL)}\n              size=\"small\"\n              centered\n              verticalAlign=\"middle\"\n            />\n          </GridColumn>\n          <GridColumn className=\"content-container\">\n            <Container>\n              {children}\n            </Container>\n          </GridColumn>\n        </GridRow>\n      </Grid>\n    </Segment>\n  </div>\n);\n\nCardContainer.defaultProps = {\n  className: '',\n  id: undefined,\n};\n\nexport default CardContainer;\n","// @flow\nimport React, { type Element } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header } from 'semantic-ui-react';\nimport CardContainer from '../shared/CardContainer';\nimport { type Question, type User } from '../../types';\nimport { COLOR } from '../../constants';\n\ntype Props = {\n  author: User,\n  question: Question,\n};\n\nconst PreviewCard = ({ author, question }: Props): Element<any> => {\n  const color: string = COLOR.UI_GENERIC;\n  const header: string = `${author.name} asks`;\n  const description: string = `${question.optionOne.text} or..`;\n\n  return (\n    <CardContainer\n      avatarURL={author.avatarURL}\n      className=\"summary-card\"\n      header={header}\n    >\n      <Header as=\"h3\">Would you rather</Header>\n      <span>{description}</span>\n      <Button\n        as={Link}\n        basic\n        color={color}\n        fluid\n        to={`/question/${question.id}`}\n      >\n        View Poll\n      </Button>\n    </CardContainer>\n  );\n};\n\nexport default PreviewCard;\n","// @flow\nimport { connect } from 'react-redux';\nimport toJS from '../../hoc/to-js';\nimport { getUserById } from '../../selectors/users';\nimport PreviewCard from '../../components/homePage/PreviewCard';\nimport { expectMap } from '../../utils/helpers';\nimport {\n  type Question,\n  type StateMap,\n  type UserMap,\n} from '../../types';\n\nconst mapStateToProps = (\n  state: StateMap,\n  { question }: { question: Question},\n): {\n  author: UserMap\n} => ({\n  author: expectMap(getUserById(state, question.author)),\n});\n\nexport default connect(\n  mapStateToProps,\n)(toJS(PreviewCard));\n","// @flow\nimport React, { type Element } from 'react';\nimport { Grid, Message } from 'semantic-ui-react';\nimport PreviewCard from '../../containers/homePage/PreviewCard';\nimport { type Question } from '../../types';\n\ntype Props = {\n  altText?: string,\n  questions: Question[],\n};\n\nconst PreviewCardList = ({ altText, questions }: Props): Element<any> => {\n  if (questions.length === 0) {\n    return (\n      <Message>\n        <p>{altText}</p>\n      </Message>\n    );\n  }\n  return (\n    <Grid stackable doubling columns={3}>\n      {questions\n        .map(question => (\n          <Grid.Column key={question.id}>\n            <PreviewCard question={question} />\n          </Grid.Column>\n        ))}\n    </Grid>\n  );\n};\n\nPreviewCardList.defaultProps = {\n  altText: 'No questions available',\n};\n\nexport default PreviewCardList;\n","// @flow\nimport React, { Component, type Element } from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport PageContainer from '../pageContainers/PageContainer';\nimport PreviewCardList from './PreviewCardList';\nimport { COLOR } from '../../constants';\nimport { type Question } from '../../types';\n\ntype Props = {\n  answeredQuestions: Question[],\n  unansweredQuestions: Question[],\n}\n\ntype Pane = {\n  menuItem: string,\n  render: () => Element<any>,\n};\n\nclass HomePage extends Component<Props> {\n  getPanes(): Pane[] {\n    const { answeredQuestions, unansweredQuestions } = this.props;\n    return [\n      {\n        menuItem: 'Unanswered Questions',\n        render: (): Element<any> => (\n          <Tab.Pane>\n            <PreviewCardList\n              questions={unansweredQuestions}\n              altText=\"You answered all the questions\"\n            />\n          </Tab.Pane>\n        ),\n      },\n      {\n        menuItem: 'Answered Questions',\n        render: (): Element<any> => (\n          <Tab.Pane>\n            <PreviewCardList\n              questions={answeredQuestions}\n              altText=\"You have not answered a question yet\"\n            />\n          </Tab.Pane>\n        ),\n      },\n    ];\n  }\n\n  render(): Element<any> {\n    const color: string = COLOR.UI_GENERIC;\n    return (\n      <PageContainer id=\"home-page\">\n        <Tab\n          menu={{\n            color,\n            align: 'center',\n            attached: true,\n            tabular: true,\n          }}\n          panes={this.getPanes()}\n        />\n      </PageContainer>\n    );\n  }\n}\n\nexport default HomePage;\n","// @flow\nimport { connect } from 'react-redux';\nimport { type List } from 'immutable';\nimport toJS from '../../hoc/to-js';\nimport { getAnsweredQuestions, getUnansweredQuestions } from '../../selectors/questions';\nimport HomePage from '../../components/homePage/HomePage';\nimport {\n  type QuestionMap,\n  type StateMap,\n} from '../../types';\n\nconst mapStateToProps = (state: StateMap): {\n  answeredQuestions: List<QuestionMap>,\n  unansweredQuestions: List<QuestionMap>,\n} => ({\n  answeredQuestions: getAnsweredQuestions(state),\n  unansweredQuestions: getUnansweredQuestions(state),\n});\n\nexport default connect(\n  mapStateToProps,\n)(toJS(HomePage));\n","// @flow\nimport { type StateMap } from '../types';\nimport { expectString } from '../utils/helpers';\n\nexport const getStatus = (state: StateMap): string => (\n  expectString(state.get('status'))\n);\n\nexport default undefined;\n","let users = {\n  sarahedo: {\n    id: 'sarahedo',\n    name: 'Sarah Edo',\n    avatarURL: '/images/sarahedo.jpg',\n    answers: {\n      \"8xf0y6ziyjabvozdd253nd\": 'optionOne',\n      \"6ni6ok3ym7mf1p33lnez\": 'optionOne',\n      \"am8ehyc8byjqgar0jgpub9\": 'optionTwo',\n      \"loxhs1bqm25b708cmbf3g\": 'optionTwo'\n    },\n    questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']\n  },\n  tylermcginnis: {\n    id: 'tylermcginnis',\n    name: 'Tyler McGinnis',\n    avatarURL: '/images/tylermcginnis.jpg',\n    answers: {\n      \"vthrdm985a262al8qx3do\": 'optionOne',\n      \"xj352vofupe1dqz9emx13r\": 'optionTwo',\n    },\n    questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\n  },\n  johndoe: {\n    id: 'johndoe',\n    name: 'John Doe',\n    avatarURL: '/images/johndoe.png',\n    answers: {\n      \"xj352vofupe1dqz9emx13r\": 'optionOne',\n      \"vthrdm985a262al8qx3do\": 'optionTwo',\n      \"6ni6ok3ym7mf1p33lnez\": 'optionOne'\n    },\n    questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\n  }\n}\n\nlet questions = {\n  \"8xf0y6ziyjabvozdd253nd\": {\n    id: '8xf0y6ziyjabvozdd253nd',\n    author: 'sarahedo',\n    timestamp: 1467166872634,\n    optionOne: {\n      votes: ['sarahedo'],\n      text: 'have horrible short term memory',\n    },\n    optionTwo: {\n      votes: [],\n      text: 'have horrible long term memory'\n    }\n  },\n  \"6ni6ok3ym7mf1p33lnez\": {\n    id: '6ni6ok3ym7mf1p33lnez',\n    author: 'johndoe',\n    timestamp: 1468479767190,\n    optionOne: {\n      votes: [],\n      text: 'become a superhero',\n    },\n    optionTwo: {\n      votes: ['johndoe', 'sarahedo'],\n      text: 'become a supervillian'\n    }\n  },\n  \"am8ehyc8byjqgar0jgpub9\": {\n    id: 'am8ehyc8byjqgar0jgpub9',\n    author: 'sarahedo',\n    timestamp: 1488579767190,\n    optionOne: {\n      votes: [],\n      text: 'be telekinetic',\n    },\n    optionTwo: {\n      votes: ['sarahedo'],\n      text: 'be telepathic'\n    }\n  },\n  \"loxhs1bqm25b708cmbf3g\": {\n    id: 'loxhs1bqm25b708cmbf3g',\n    author: 'tylermcginnis',\n    timestamp: 1482579767190,\n    optionOne: {\n      votes: [],\n      text: 'be a front-end developer',\n    },\n    optionTwo: {\n      votes: ['sarahedo'],\n      text: 'be a back-end developer'\n    }\n  },\n  \"vthrdm985a262al8qx3do\": {\n    id: 'vthrdm985a262al8qx3do',\n    author: 'tylermcginnis',\n    timestamp: 1489579767190,\n    optionOne: {\n      votes: ['tylermcginnis'],\n      text: 'find $50 yourself',\n    },\n    optionTwo: {\n      votes: ['johndoe'],\n      text: 'have your best friend find $500'\n    }\n  },\n  \"xj352vofupe1dqz9emx13r\": {\n    id: 'xj352vofupe1dqz9emx13r',\n    author: 'johndoe',\n    timestamp: 1493579767190,\n    optionOne: {\n      votes: ['johndoe'],\n      text: 'write JavaScript',\n    },\n    optionTwo: {\n      votes: ['tylermcginnis'],\n      text: 'write Swift'\n    }\n  },\n}\n\nfunction generateUID () {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n}\n\nexport function _getUsers () {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({...users}), 1000)\n  })\n}\n\nexport function _getQuestions () {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({...questions}), 1000)\n  })\n}\n\nfunction formatQuestion ({ optionOneText, optionTwoText, author }) {\n  return {\n    id: generateUID(),\n    timestamp: Date.now(),\n    author,\n    optionOne: {\n      votes: [],\n      text: optionOneText,\n    },\n    optionTwo: {\n      votes: [],\n      text: optionTwoText,\n    }\n  }\n}\n\nexport function _saveQuestion (question) {\n  return new Promise((res, rej) => {\n    const authedUser = question.author;\n    const formattedQuestion = formatQuestion(question)\n\n    setTimeout(() => {\n      questions = {\n        ...questions,\n        [formattedQuestion.id]: formattedQuestion\n      }\n\n      users = {\n        ...users,\n        [authedUser]: {\n          ...users[authedUser],\n          questions: users[authedUser].questions.concat([formattedQuestion.id])\n        }\n      }\n\n      res(formattedQuestion)\n    }, 1000)\n  })\n}\n\nexport function _saveQuestionAnswer ({ authedUser, qid, answer }) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      users = {\n        ...users,\n        [authedUser]: {\n          ...users[authedUser],\n          answers: {\n            ...users[authedUser].answers,\n            [qid]: answer\n          }\n        }\n      }\n\n      questions = {\n        ...questions,\n        [qid]: {\n          ...questions[qid],\n          [answer]: {\n            ...questions[qid][answer],\n            votes: questions[qid][answer].votes.concat([authedUser])\n          }\n        }\n      }\n\n      res()\n    }, 500)\n  })\n}\n","// @flow\nimport {\n  type InitialData,\n  type Question,\n  type Questions,\n  type Users,\n} from '../types';\nimport {\n  _getUsers,\n  _getQuestions,\n  _saveQuestion,\n  _saveQuestionAnswer,\n} from './_DATA';\n\nexport const getInitialData = (): Promise<InitialData> => (\n  Promise.all([\n    (_getQuestions(): Questions),\n    (_getUsers(): Users),\n  ])\n    .then(([questions, users]) => ({\n      questions,\n      users,\n    }))\n);\n\nexport const saveQuestion = (\n  authedUserId: string,\n  optionOneText: string,\n  optionTwoText: string,\n): Promise<Question> => (\n  _saveQuestion({\n    author: authedUserId,\n    optionOneText,\n    optionTwoText,\n  })\n);\n\nexport const saveQuestionAnswer = (\n  authedUserId: string,\n  questionId: string,\n  optionKey: string,\n): Promise<void> => (\n  _saveQuestionAnswer({\n    authedUser: authedUserId,\n    qid: questionId,\n    answer: optionKey,\n  })\n);\n","// @flow\nimport {\n  type Action,\n  type Users,\n} from '../types';\n\ntype AddAnswerToUser = 'users/ADD_ANSWER_TO_USER'\ntype AddQuestionToUser = 'users/ADD_QUESTION_TO_USER'\ntype InitUsers = 'users/INIT_USERS'\n\nexport const ADD_ANSWER_TO_USER: AddAnswerToUser = 'users/ADD_ANSWER_TO_USER';\nexport const ADD_QUESTION_TO_USER: AddQuestionToUser = 'users/ADD_QUESTION_TO_USER';\nexport const INIT_USERS: InitUsers = 'users/INIT_USERS';\n\nexport type AddAnswerToUserPayload = {\n  authedUserId: string,\n  optionKey: string,\n  questionId: string\n}\nexport type AddQuestionToUserPayload = {\n  authedUserId: string,\n  questionId: string\n}\nexport type InitUsersPayload = {\n  users: Users\n}\n\nexport type AddAnswerToUserAction = Action<AddAnswerToUser, AddAnswerToUserPayload>\nexport type AddQuestionToUserAction = Action<AddQuestionToUser, AddQuestionToUserPayload>\nexport type InitUsersAction = Action<InitUsers, InitUsersPayload>\n\nexport type UsersAction =\n  | AddAnswerToUserAction\n  | AddQuestionToUserAction\n  | InitUsersAction\n\nexport const addAnswerToUser = (\n  authedUserId: string,\n  questionId: string,\n  optionKey: string,\n): AddAnswerToUserAction => ({\n  type: ADD_ANSWER_TO_USER,\n  payload: {\n    authedUserId,\n    questionId,\n    optionKey,\n  },\n});\n\nexport const addQuestionToUser = (\n  authedUserId: string,\n  questionId: string,\n): AddQuestionToUserAction => ({\n  type: ADD_QUESTION_TO_USER,\n  payload: {\n    authedUserId,\n    questionId,\n  },\n});\n\nexport const initUsers = (\n  users: Users,\n): InitUsersAction => ({\n  type: INIT_USERS,\n  payload: {\n    users,\n  },\n});\n","// @flow\nimport {\n  type Action,\n  type Question,\n  type Questions,\n} from '../types';\n\ntype AddQuestion = 'questions/ADD_QUESTION'\ntype AddUserToQuestionVotes = 'questions/ADD_USER_TO_QUESTION_VOTES'\ntype InitQuestions = 'questions/INIT_QUESTIONS'\n\nexport const ADD_QUESTION: AddQuestion = 'questions/ADD_QUESTION';\nexport const ADD_USER_TO_QUESTION_VOTES: AddUserToQuestionVotes = 'questions/ADD_USER_TO_QUESTION_VOTES';\nexport const INIT_QUESTIONS: InitQuestions = 'questions/INIT_QUESTIONS';\n\nexport type AddQuestionPayload = {\n  question: Question\n}\nexport type AddUserToQuestionVotesPayload = {\n  authedUserId: string,\n  optionKey: string,\n  questionId: string\n}\nexport type InitQuestionsPayload = {\n  questions: Questions\n}\n\nexport type AddQuestionAction = Action<AddQuestion, AddQuestionPayload>\nexport type AddUserToQuestionVotesAction =\n  | Action<AddUserToQuestionVotes, AddUserToQuestionVotesPayload>\nexport type InitQuestionsAction = Action<InitQuestions, InitQuestionsPayload>\n\nexport type QuestionsAction =\n  | AddQuestionAction\n  | AddUserToQuestionVotesAction\n  | InitQuestionsAction\n\nexport const addQuestion = (\n  question: Question,\n): AddQuestionAction => ({\n  type: ADD_QUESTION,\n  payload: {\n    question,\n  },\n});\n\nexport const addUserToQuestionVotes = (\n  authedUserId: string,\n  questionId: string,\n  optionKey: string,\n): AddUserToQuestionVotesAction => ({\n  type: ADD_USER_TO_QUESTION_VOTES,\n  payload: {\n    authedUserId,\n    questionId,\n    optionKey,\n  },\n});\n\nexport const initQuestions = (\n  questions: Questions,\n): InitQuestionsAction => ({\n  type: INIT_QUESTIONS,\n  payload: {\n    questions,\n  },\n});\n","// @flow\nimport { type Action } from '../types';\n\ntype SetBusyState = 'status/SET_BUSY_STATE'\ntype SetErrorState = 'status/SET_ERROR_STATE'\ntype SetInitState = 'status/SET_INIT_STATE'\ntype SetSuccessState = 'status/SET_SUCCESS_STATE'\ntype SetReadyState = 'status/SET_READY_STATE'\n\nexport const SET_BUSY_STATE: SetBusyState = 'status/SET_BUSY_STATE';\nexport const SET_ERROR_STATE: SetErrorState = 'status/SET_ERROR_STATE';\nexport const SET_INIT_STATE: SetInitState = 'status/SET_INIT_STATE';\nexport const SET_SUCCESS_STATE: SetSuccessState = 'status/SET_SUCCESS_STATE';\nexport const SET_READY_STATE: SetReadyState = 'status/SET_READY_STATE';\n\nexport type SetBusyStateAction = Action<SetBusyState>\nexport type SetErrorStateAction = Action<SetErrorState>\nexport type SetInitStateAction = Action<SetInitState>\nexport type SetSuccessStateAction = Action<SetSuccessState>\nexport type SetReadyStateAction = Action<SetReadyState>\n\nexport type StatusAction =\n  | SetBusyStateAction\n  | SetErrorStateAction\n  | SetInitStateAction\n  | SetSuccessStateAction\n  | SetReadyStateAction\n\nexport const setBusyState = (): SetBusyStateAction => ({\n  type: SET_BUSY_STATE,\n});\n\nexport const setErrorState = (): SetErrorStateAction => ({\n  type: SET_ERROR_STATE,\n});\n\nexport const setInitState = (): SetInitStateAction => ({\n  type: SET_INIT_STATE,\n});\n\nexport const setSuccessState = (): SetSuccessStateAction => ({\n  type: SET_SUCCESS_STATE,\n});\n\nexport const setReadyState = (): SetReadyStateAction => ({\n  type: SET_READY_STATE,\n});\n","// @flow\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { saveQuestionAnswer } from '../../utils/api';\nimport { addAnswerToUser, type AddAnswerToUserAction } from '../users';\nimport { addUserToQuestionVotes, type AddUserToQuestionVotesAction } from '../questions';\nimport {\n  setBusyState, type SetBusyStateAction,\n  setReadyState, type SetReadyStateAction,\n} from '../status';\nimport {\n  type Dispatch,\n  type Thunk,\n} from '../../types';\n\nexport type SetVoteAction =\n  | SetBusyStateAction\n  | SetReadyStateAction\n  | AddAnswerToUserAction\n  | AddUserToQuestionVotesAction\n\nfunction setVote(\n  authedUserId: string,\n  questionId: string,\n  optionKey: string,\n): Thunk<SetVoteAction> {\n  return (dispatch: Dispatch<SetVoteAction>): Promise<void> => {\n    dispatch(showLoading());\n    dispatch(setBusyState());\n    return saveQuestionAnswer(authedUserId, questionId, optionKey)\n      .then(() => {\n        dispatch(addUserToQuestionVotes(authedUserId, questionId, optionKey));\n        dispatch(addAnswerToUser(authedUserId, questionId, optionKey));\n        dispatch(hideLoading());\n        dispatch(setReadyState());\n      });\n  };\n}\n\nexport default setVote;\n","// @flow\nimport React, { Component, type Element } from 'react';\nimport {\n  Button,\n  Form,\n  type FormProps,\n  Header,\n} from 'semantic-ui-react';\nimport CardContainer from '../shared/CardContainer';\nimport { type Question, type User } from '../../types';\nimport { COLOR } from '../../constants';\n\ntype Props = {\n  authedUserId: string,\n  author: User,\n  busy: boolean,\n  question: Question,\n  setVote: (authedUserId: string, questionId: string, optionKey: string) => void,\n};\n\ntype State = {\n  optionKey: string,\n};\n\ninterface IFormProps extends FormProps {\n  value: string,\n}\n\nclass PollCard extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  state = {\n    optionKey: '',\n  };\n\n  handleChange = (event: SyntheticEvent<HTMLFormElement>, { value }: IFormProps): void => {\n    this.setState({\n      optionKey: value,\n    });\n  };\n\n  handleSubmit = (): void => {\n    const { authedUserId, question, setVote } = this.props;\n    const { optionKey } = this.state;\n    setVote(authedUserId, question.id, optionKey);\n  };\n\n  render(): Element<any> {\n    const { author, busy, question } = this.props;\n    const { optionKey } = this.state;\n    const color: string = COLOR.UI_GENERIC;\n    const header: string = `${author.name} asks`;\n\n    return (\n      <CardContainer id=\"poll-card\" header={header} avatarURL={author.avatarURL}>\n        <Header as=\"h3\">Would you rather...</Header>\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Radio\n            label={question.optionOne.text}\n            name=\"radioGroup\"\n            value=\"optionOne\"\n            checked={optionKey === 'optionOne'}\n            onChange={this.handleChange}\n            disabled={busy}\n          />\n          <Form.Radio\n            label={question.optionTwo.text}\n            name=\"radioGroup\"\n            value=\"optionTwo\"\n            checked={optionKey === 'optionTwo'}\n            onChange={this.handleChange}\n            disabled={busy}\n          />\n          <Button\n            color={color}\n            disabled={busy || optionKey === ''}\n            fluid\n            loading={busy}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Form>\n      </CardContainer>\n    );\n  }\n}\n\nexport default PollCard;\n","// @flow\nimport { connect } from 'react-redux';\nimport toJS from '../../hoc/to-js';\nimport { getAuthedUserId } from '../../selectors/authedUserId';\nimport { getUserById } from '../../selectors/users';\nimport { BUSY_STATE } from '../../states/status';\nimport { getStatus } from '../../selectors/status';\nimport setVote, { type SetVoteAction } from '../../actions/thunk/setVote';\nimport PollCard from '../../components/pollPage/PollCard';\nimport {\n  type Question,\n  type Dispatch,\n  type Thunk,\n  type StateMap,\n  type UserMap,\n} from '../../types';\nimport { expectMap } from '../../utils/helpers';\n\ntype Action =\n  | Thunk<SetVoteAction>\n\nconst mapStateToProps = (\n  state: StateMap,\n  { question }: { question: Question},\n): {\n  authedUserId: string,\n  author: UserMap,\n  busy: boolean,\n} => ({\n  authedUserId: getAuthedUserId(state),\n  author: expectMap(getUserById(state, question.author)),\n  busy: getStatus(state) === BUSY_STATE,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  setVote: (authedUserId: string, questionId: string, optionKey: string): void => (\n    dispatch(setVote(authedUserId, questionId, optionKey))\n  ),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(toJS(PollCard));\n","// @flow\nexport const BUSY_STATE: string = 'BUSY_STATE';\nexport const ERROR_STATE: string = 'ERROR_STATE';\nexport const INIT_STATE: string = 'INIT_STATE';\nexport const SUCCESS_STATE: string = 'SUCCESS_STATE';\nexport const READY_STATE: string = 'READY_STATE';\n","// @flow\nimport React, { type Element } from 'react';\nimport { Label, Message, Progress } from 'semantic-ui-react';\nimport { COLOR } from '../../constants';\n\ntype Props = {\n  count: number,\n  overall: number,\n  text: string,\n  voted: boolean,\n};\n\nconst OptionPercentage = ({\n  count,\n  overall,\n  text,\n  voted,\n}: Props): Element<any> => {\n  let messageColor: string;\n  if (voted) {\n    messageColor = COLOR.UI_GENERIC;\n  }\n  const className: string = count === 0 ? 'hidden' : '';\n  return (\n    <Message color={messageColor}>\n      {voted && (\n        <Label circular color=\"yellow\">\n          <span>Your<br />Vote</span>\n        </Label>\n      )}\n      <Message.Header>{text}</Message.Header>\n      <Message.Content>\n        <Progress\n          className={className}\n          color={COLOR.UI_GENERIC}\n          precision={0}\n          progress\n          total={overall}\n          value={count}\n        />\n        <span className=\"\">\n          <b>{`${count} of ${overall} votes`}</b>\n        </span>\n      </Message.Content>\n    </Message>\n  );\n};\n\nexport default OptionPercentage;\n","// @flow\nimport React, { Component, type Element } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport CardContainer from '../shared/CardContainer';\nimport OptionPercentage from './OptionPercentage';\nimport { type Question, type User } from '../../types';\n\ntype Props = {\n  authedUserId: string,\n  author: User,\n  question: Question,\n};\n\ntype Result = {\n  count: number,\n  key: string,\n  overall: number,\n  text: string,\n  voted: boolean,\n};\n\nclass ResultsCard extends Component<Props> {\n  getResult(optionKey: string): Result {\n    const { authedUserId, question } = this.props;\n    return {\n      count: question[optionKey].votes.length,\n      key: optionKey,\n      overall: this.countAllVotes(),\n      text: `Would you rather ${question[optionKey].text}?`,\n      voted: question[optionKey].votes.includes(authedUserId),\n    };\n  }\n\n  getResults(): Result[] {\n    return ['optionOne', 'optionTwo'].map(optionKey => this.getResult(optionKey));\n  }\n\n  countAllVotes(): number {\n    const { question } = this.props;\n    return (\n      question.optionOne.votes.length\n      + question.optionTwo.votes.length\n    );\n  }\n\n  render(): Element<any> {\n    const { author } = this.props;\n    const header: string = `${author.name} asks`;\n    const results: Result[] = this.getResults();\n\n    return (\n      <CardContainer\n        avatarURL={author.avatarURL}\n        header={header}\n        id=\"results-card\"\n      >\n        <Header as=\"h3\">Results:</Header>\n        {results.map(result => (\n          <OptionPercentage\n            count={result.count}\n            key={result.key}\n            overall={result.overall}\n            text={result.text}\n            voted={result.voted}\n          />\n        ))}\n\n      </CardContainer>\n    );\n  }\n}\n\nexport default ResultsCard;\n","// @flow\nimport { connect } from 'react-redux';\nimport toJS from '../../hoc/to-js';\nimport { getAuthedUserId } from '../../selectors/authedUserId';\nimport { getUserById } from '../../selectors/users';\nimport ResultsCard from '../../components/pollPage/ResultsCard';\nimport {\n  type Question,\n  type StateMap,\n  type UserMap,\n} from '../../types';\nimport { expectMap } from '../../utils/helpers';\n\nconst mapStateToProps = (\n  state: StateMap,\n  { question }: { question: Question},\n): {\n  authedUserId: string,\n  author: UserMap,\n} => ({\n  authedUserId: getAuthedUserId(state),\n  author: expectMap(getUserById(state, question.author)),\n});\n\nexport default connect(\n  mapStateToProps,\n)(toJS(ResultsCard));\n","// @flow\nimport React, { type Element } from 'react';\nimport PageContainer from './pageContainers/PageContainer';\n\n/**\n * @module\n * @name NotFoundPage\n * @description\n * Displays a simple 404 Not Found page consisting in a green circle with text.\n * The user gets this when typing an unexpected location path in the browser url bar.\n */\nconst NotFoundPage = (): Element<any> => (\n  <PageContainer id=\"notfound-page\">\n    <div className=\"notfound-page-wrap\">\n      <h1>404</h1>\n      <h2>Not Found</h2>\n    </div>\n  </PageContainer>\n);\n\nexport default NotFoundPage;\n","// @flow\nimport React, { type Element } from 'react';\nimport PageContainer from '../pageContainers/PageContainer';\nimport PollCard from '../../containers/pollPage/PollCard';\nimport ResultsCard from '../../containers/pollPage/ResultsCard';\nimport NotFoundPage from '../NotFoundPage';\nimport { type Question } from '../../types';\n\ntype Props = {\n  question?: Question,\n  isAnswered: boolean,\n};\n\nconst PollPage = ({ question, isAnswered }: Props): Element<any> => {\n  if (!question) {\n    return <NotFoundPage />;\n  }\n  return (\n    <PageContainer id=\"poll-page\">\n      {isAnswered\n        ? (<ResultsCard question={question} />)\n        : (<PollCard question={question} />)}\n    </PageContainer>\n  );\n};\n\nPollPage.defaultProps = {\n  question: undefined,\n};\n\nexport default PollPage;\n","// @flow\nimport { connect } from 'react-redux';\nimport { type Match } from 'react-router-dom';\nimport toJS from '../../hoc/to-js';\nimport { getAuthedUserId } from '../../selectors/authedUserId';\nimport { getQuestionById, isAnswered } from '../../selectors/questions';\nimport PollPage from '../../components/pollPage/PollPage';\nimport { expectString } from '../../utils/helpers';\nimport {\n  type QuestionMap,\n  type StateMap,\n} from '../../types';\n\nconst mapStateToProps = (\n  state: StateMap,\n  { match }: { match: Match},\n): {\n  isAnswered: boolean,\n  question?: QuestionMap,\n} => {\n  const questionId: string = expectString(match.params.questionId);\n  const question: QuestionMap | void = getQuestionById(state, questionId);\n  const authedUserId: string = getAuthedUserId(state);\n  return {\n    question,\n    isAnswered: !!question && isAnswered(question, authedUserId),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(toJS(PollPage));\n","// @flow\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { saveQuestion } from '../../utils/api';\nimport { addQuestionToUser, type AddQuestionToUserAction } from '../users';\nimport { addQuestion, type AddQuestionAction } from '../questions';\nimport {\n  setBusyState, type SetBusyStateAction,\n  setSuccessState, type SetSuccessStateAction,\n} from '../status';\nimport {\n  type Dispatch,\n  type Question,\n  type Thunk,\n} from '../../types';\n\nexport type SetQuestionAction =\n  | SetBusyStateAction\n  | AddQuestionAction\n  | AddQuestionToUserAction\n  | SetSuccessStateAction\n\nfunction setQuestion(\n  authedUserId: string,\n  optionOneText: string,\n  optionTwoText: string,\n): Thunk<SetQuestionAction> {\n  return (dispatch: Dispatch<SetQuestionAction>): Promise<void> => {\n    dispatch(showLoading());\n    dispatch(setBusyState());\n    return saveQuestion(authedUserId, optionOneText, optionTwoText)\n      .then((question: Question) => {\n        dispatch(addQuestion(question));\n        dispatch(addQuestionToUser(authedUserId, question.id));\n        dispatch(hideLoading());\n        dispatch(setSuccessState());\n      });\n  };\n}\n\nexport default setQuestion;\n","// @flow\nimport React, { Component, type Element } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {\n  Button,\n  Divider,\n  Form,\n  type FormProps,\n  Segment,\n} from 'semantic-ui-react';\nimport PageContainer from './pageContainers/PageContainer';\nimport { COLOR } from '../constants';\n\ntype Props = {\n  authedUserId: string,\n  busy: boolean,\n  setQuestion: (authedUserId: string, optionOneText: string, optionTwoText: string) => void,\n  success: boolean,\n  setReadyState: () => void,\n};\n\ntype State = {\n  optionOneText: string,\n  optionTwoText: string,\n};\n\ninterface IFormProps extends FormProps {\n  id: string,\n  value: string,\n}\n\nclass AddQuestionPage extends Component<Props, State> {\n  static isEmpty(value: string): boolean {\n    return value === '' || value.trim() === '';\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  state = {\n    optionOneText: '',\n    optionTwoText: '',\n  };\n\n  componentWillUnmount() {\n    const { setReadyState } = this.props;\n    setReadyState();\n  }\n\n  handleBlur = (event: SyntheticEvent<HTMLInputElement>): void => {\n    const { id, value } = (event.currentTarget: HTMLInputElement);\n    const { isEmpty } = this.constructor;\n    if (isEmpty(value)) {\n      this.setState({\n        [id]: '',\n      });\n    } else {\n      this.setState({\n        [id]: value.trim().replace(/\\s+/g, ' '),\n      });\n    }\n  };\n\n  handleChange = (event: SyntheticEvent<HTMLInputElement>, { id, value }: IFormProps): void => {\n    this.setState({\n      [id]: value,\n    });\n  };\n\n  handleSubmit = (): void => {\n    const { authedUserId, setQuestion } = this.props;\n    const { optionOneText, optionTwoText } = this.state;\n    setQuestion(authedUserId, optionOneText, optionTwoText);\n  };\n\n  render(): Element<any> {\n    const { busy, success } = this.props;\n    const { optionOneText, optionTwoText } = this.state;\n    const { isEmpty } = this.constructor;\n    const optionOneAlt: string = 'Enter Option One Text Here';\n    const optionTwoAlt: string = 'Enter Option Two Text Here';\n\n    const color: string = COLOR.UI_GENERIC;\n\n    if (success) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <PageContainer id=\"add-question-page\">\n        <Segment\n          attached\n          secondary\n          size=\"huge\"\n          textAlign=\"center\"\n        >\n          <b>Create New Question</b>\n        </Segment>\n        <Segment attached>\n          <Form onSubmit={this.handleSubmit}>\n            <h3>Would you rather...</h3>\n            <Form.Input\n              className=\"optionText\"\n              disabled={busy}\n              id=\"optionOneText\"\n              onBlur={this.handleBlur}\n              onChange={this.handleChange}\n              placeholder={optionOneAlt}\n              value={optionOneText}\n            />\n            <Divider horizontal>Or</Divider>\n            <Form.Input\n              className=\"optionText\"\n              disabled={busy}\n              id=\"optionTwoText\"\n              onBlur={this.handleBlur}\n              onChange={this.handleChange}\n              placeholder={optionTwoAlt}\n              value={optionTwoText}\n            />\n            <Button\n              color={color}\n              disabled={\n                busy\n                || isEmpty(optionOneText)\n                || isEmpty(optionTwoText)\n              }\n              fluid\n              loading={busy}\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          </Form>\n        </Segment>\n      </PageContainer>\n    );\n  }\n}\n\nexport default AddQuestionPage;\n","// @flow\nimport { connect } from 'react-redux';\nimport { getAuthedUserId } from '../selectors/authedUserId';\nimport { BUSY_STATE, SUCCESS_STATE } from '../states/status';\nimport { getStatus } from '../selectors/status';\nimport setQuestion, { type SetQuestionAction } from '../actions/thunk/setQuestion';\nimport { setReadyState, type SetReadyStateAction } from '../actions/status';\nimport AddQuestionPage from '../components/AddQuestionPage';\nimport {\n  type Dispatch,\n  type StateMap,\n  type Thunk,\n} from '../types';\n\ntype Action =\n  | Thunk<SetQuestionAction>\n  | SetReadyStateAction\n\nconst mapStateToProps = (state: StateMap): {\n  authedUserId: string,\n  busy: boolean,\n  success: boolean,\n} => ({\n  authedUserId: getAuthedUserId(state),\n  busy: getStatus(state) === BUSY_STATE,\n  success: getStatus(state) === SUCCESS_STATE,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  setQuestion: (authedUserId: string, questionId: string, optionKey: string): void => (\n    dispatch(setQuestion(authedUserId, questionId, optionKey))\n  ),\n  setReadyState: (): void => (\n    dispatch(setReadyState())\n  ),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AddQuestionPage);\n","// @flow\nimport React from 'react';\nimport {\n  Grid,\n  Header,\n  Image,\n  Label,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport { COLOR } from '../../constants';\nimport { addBasenameToUrl } from '../../utils/helpers';\n\ntype Props = {\n  answered: number,\n  asked: number,\n  avatarURL: string,\n  highlight?: boolean,\n  name: string,\n};\n\nconst LeaderCard = ({\n  answered,\n  asked,\n  avatarURL,\n  highlight,\n  name,\n}: Props) => {\n  const color: string = COLOR.UI_GENERIC;\n  let segmentColor: string;\n  if (highlight) {\n    segmentColor = COLOR.UI_GENERIC;\n  }\n  return (\n    <Segment className=\"leader-card\" color={segmentColor}>\n      <Grid columns={3} divided>\n        <Grid.Row>\n          <Grid.Column className=\"avatar-container\">\n            {highlight && (\n              <Label as=\"a\" color={color} ribbon>You</Label>\n            )}\n            <Image\n              className=\"big-avatar\"\n              avatar\n              src={addBasenameToUrl(avatarURL)}\n              size=\"tiny\"\n              centered\n              verticalAlign=\"middle\"\n            />\n          </Grid.Column>\n          <Grid.Column className=\"details-container\">\n            <p className=\"leader-name\"><b>{name}</b></p>\n            <Table basic=\"very\" unstackable>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Cell>Answered</Table.Cell>\n                  <Table.Cell>{answered}</Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>Asked</Table.Cell>\n                  <Table.Cell>{asked}</Table.Cell>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Grid.Column>\n          <Grid.Column className=\"score-container\">\n            <div>\n              <Header as=\"h5\" block attached=\"top\" textAlign=\"center\">\n                Score\n              </Header>\n              <Segment attached textAlign=\"center\">\n                <Label circular color={color} size=\"big\">\n                  {answered + asked}\n                </Label>\n              </Segment>\n            </div>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  );\n};\n\nLeaderCard.defaultProps = {\n  highlight: false,\n};\n\nexport default LeaderCard;\n","// @flow\nimport React, { type Element } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport PageContainer from '../pageContainers/PageContainer';\nimport LeaderCard from './LeaderCard';\nimport { type Leader } from '../../types';\n\ntype Props = {\n  authedUserId: string,\n  leaders: Leader[],\n};\n\nconst LeaderboardPage = ({ authedUserId, leaders }: Props): Element<any> => (\n  <PageContainer id=\"leaderboard-page\">\n    <Grid\n      columns={1}\n      doubling={false}\n      stackable={false}\n    >\n      {leaders.map(leader => (\n        <Grid.Column key={leader.id}>\n          <LeaderCard\n            answered={leader.answered}\n            asked={leader.asked}\n            avatarURL={leader.avatarURL}\n            highlight={leader.id === authedUserId}\n            name={leader.name}\n          />\n        </Grid.Column>\n      ))}\n    </Grid>\n  </PageContainer>\n);\n\nexport default LeaderboardPage;\n","// @flow\nimport { connect } from 'react-redux';\nimport { List } from 'immutable';\nimport toJS from '../../hoc/to-js';\nimport { getAuthedUserId } from '../../selectors/authedUserId';\nimport { getLeaders } from '../../selectors/users';\nimport LeaderboardPage from '../../components/leaderboardPage/LeaderboardPage';\nimport {\n  type LeaderMap,\n  type StateMap,\n} from '../../types';\n\nconst mapStateToProps = (state: StateMap): {\n  authedUserId: string,\n  leaders: List<LeaderMap>\n} => ({\n  authedUserId: getAuthedUserId(state),\n  leaders: getLeaders(state),\n});\n\nexport default connect(\n  mapStateToProps,\n)(toJS(LeaderboardPage));\n","// @flow\nimport React, { type Element } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport PrivateRoute from '../containers/PrivateRoute';\nimport LoginPage from '../containers/LoginPage';\nimport HomePage from '../containers/homePage/HomePage';\nimport PollPage from '../containers/pollPage/PollPage';\nimport AddQuestionPage from '../containers/AddQuestionPage';\nimport LeaderboardPage from '../containers/leaderboardPage/LeaderboardPage';\nimport NotFoundPage from './NotFoundPage';\nimport { getBasename } from '../utils/helpers';\n\nconst Navigation = (): Element<any> => (\n  <Router basename={getBasename()}>\n    <Switch>\n      <Route path=\"/login\" component={LoginPage} />\n      <PrivateRoute exact path=\"/\" component={HomePage} />\n      <PrivateRoute path=\"/question/:questionId\" component={PollPage} />\n      <PrivateRoute path=\"/add\" component={AddQuestionPage} />\n      <PrivateRoute path=\"/leaderboard\" component={LeaderboardPage} />\n      <PrivateRoute component={NotFoundPage} />\n    </Switch>\n  </Router>\n);\n\nexport default Navigation;\n","// @flow\nimport React, { Component, type Element, Fragment } from 'react';\nimport { ImmutableLoadingBar as LoadingBar } from 'react-redux-loading-bar';\nimport Navigation from './Navigation';\n\ntype Props = {\n  loadInitialData: () => void,\n  loading: boolean,\n};\n\nclass App extends Component<Props> {\n  componentDidMount(): void {\n    const { loadInitialData } = this.props;\n    document.title = 'Would You Rather...?';\n    loadInitialData();\n  }\n\n  render(): Element<any> {\n    const { loading } = this.props;\n    return (\n      <Fragment>\n        <LoadingBar />\n        {loading === true\n          ? null\n          : <Navigation />}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// @flow\nimport { showLoading, hideLoading } from 'react-redux-loading-bar';\nimport { getInitialData } from '../../utils/api';\nimport { initUsers, type InitUsersAction } from '../users';\nimport { initQuestions, type InitQuestionsAction } from '../questions';\nimport {\n  setBusyState, type SetBusyStateAction,\n  setReadyState, type SetReadyStateAction,\n} from '../status';\nimport {\n  type Dispatch,\n  type InitialData,\n  type Thunk,\n} from '../../types';\n\nexport type InitialDataAction =\n  | SetBusyStateAction\n  | InitUsersAction\n  | InitQuestionsAction\n  | SetReadyStateAction\n\nfunction handleInitialData(): Thunk<InitialDataAction> {\n  return (dispatch: Dispatch<InitialDataAction>): Promise<void> => {\n    dispatch(showLoading());\n    dispatch(setBusyState());\n    return getInitialData()\n      .then(({ questions, users }: InitialData) => {\n        dispatch(initUsers(users));\n        dispatch(initQuestions(questions));\n        dispatch(hideLoading());\n        dispatch(setReadyState());\n      });\n  };\n}\n\nexport default handleInitialData;\n","// @flow\nimport { connect } from 'react-redux';\nimport App from '../components/App';\nimport { INIT_STATE } from '../states/status';\nimport handleInitialData, { type InitialDataAction } from '../actions/thunk/handleInitialData';\nimport { getStatus } from '../selectors/status';\nimport {\n  type Dispatch,\n  type StateMap,\n  type Thunk,\n} from '../types';\n\ntype Action =\n  | Thunk<InitialDataAction>\n\nconst mapStateToProps = (state: StateMap): {\n  loading: boolean,\n} => ({\n  loading: getStatus(state) === INIT_STATE,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  loadInitialData: (): void => dispatch(handleInitialData()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","// @flow\n/* eslint-disable prefer-destructuring */\n\nimport {\n  type AuthedUserIdAction,\n  LOGIN, type LoginPayload,\n  LOGOUT,\n} from '../actions/authedUserId';\n\nfunction reducer(state: string = '', action: AuthedUserIdAction): string {\n  switch (action.type) {\n    case LOGIN: {\n      const payload: LoginPayload | void = action.payload;\n      return (payload) ? payload.id : '';\n    }\n\n    case LOGOUT:\n      return '';\n\n    default: {\n      (action: empty); // eslint-disable-line no-unused-expressions\n      return state;\n    }\n  }\n}\n\nexport default reducer;\n","// @flow\n/* eslint-disable prefer-destructuring */\n\nimport { fromJS, Map } from 'immutable';\nimport {\n  type QuestionsAction,\n  ADD_QUESTION, type AddQuestionPayload,\n  ADD_USER_TO_QUESTION_VOTES, type AddUserToQuestionVotesPayload,\n  INIT_QUESTIONS, type InitQuestionsPayload,\n} from '../actions/questions';\nimport {\n  type QuestionMap,\n  type QuestionsMap,\n} from '../types';\n\nconst reducer = (state: QuestionsMap = new Map(), action: QuestionsAction) => {\n  switch (action.type) {\n    case ADD_QUESTION: {\n      const payload: AddQuestionPayload | void = action.payload;\n      if (payload) {\n        const { question } = payload;\n        const questionMap: QuestionMap = ((fromJS(question): any): QuestionMap);\n        // $FlowSuppressError: The following line is borked because of https://github.com/facebook/flow/issues/7309\n        return state.merge({ [question.id]: questionMap });\n      }\n      throw new Error('unexpected empty payload');\n    }\n\n    case ADD_USER_TO_QUESTION_VOTES: {\n      const payload: AddUserToQuestionVotesPayload | void = action.payload;\n      if (payload) {\n        const { authedUserId, questionId, optionKey } = payload;\n        // $FlowSuppressError: The following line is borked because of https://github.com/facebook/flow/issues/7309\n        return state.mergeIn(\n          [questionId, optionKey, 'votes'],\n          authedUserId,\n        );\n      }\n      throw new Error('unexpected empty payload');\n    }\n\n    case INIT_QUESTIONS: {\n      const payload: InitQuestionsPayload | void = action.payload;\n      if (payload) {\n        const { questions } = payload;\n        const questionsMap: QuestionsMap = ((fromJS(questions): any): QuestionsMap);\n        // $FlowSuppressError: The following line is borked because of https://github.com/facebook/flow/issues/7309\n        return state.merge(questionsMap);\n      }\n      throw new Error('unexpected empty payload');\n    }\n\n    default:\n      (action: empty); // eslint-disable-line no-unused-expressions\n      return state;\n  }\n};\n\nexport default reducer;\n","// @flow\nimport {\n  type StatusAction,\n  SET_BUSY_STATE,\n  SET_ERROR_STATE,\n  SET_INIT_STATE,\n  SET_SUCCESS_STATE,\n  SET_READY_STATE,\n} from '../actions/status';\nimport {\n  BUSY_STATE,\n  ERROR_STATE,\n  INIT_STATE,\n  SUCCESS_STATE,\n  READY_STATE,\n} from '../states/status';\n\nconst reducer = (state: string = INIT_STATE, action: StatusAction) => {\n  switch (action.type) {\n    case SET_BUSY_STATE:\n      return BUSY_STATE;\n\n    case SET_ERROR_STATE:\n      return ERROR_STATE;\n\n    case SET_INIT_STATE:\n      return INIT_STATE;\n\n    case SET_SUCCESS_STATE:\n      return SUCCESS_STATE;\n\n    case SET_READY_STATE:\n      return READY_STATE;\n\n    default:\n      (action: empty); // eslint-disable-line no-unused-expressions\n      return state;\n  }\n};\n\nexport default reducer;\n","// @flow\n/* eslint-disable prefer-destructuring */\n\nimport { fromJS, Map, List } from 'immutable';\nimport {\n  type UsersAction,\n  ADD_ANSWER_TO_USER, type AddAnswerToUserPayload,\n  ADD_QUESTION_TO_USER, type AddQuestionToUserPayload,\n  INIT_USERS, type InitUsersPayload,\n} from '../actions/users';\nimport {\n  type UsersMap,\n} from '../types';\n\nconst reducer = (state: UsersMap = new Map(), action: UsersAction) => {\n  switch (action.type) {\n    case ADD_ANSWER_TO_USER: {\n      const payload: AddAnswerToUserPayload | void = action.payload;\n      if (payload) {\n        const { authedUserId, questionId, optionKey } = payload;\n        // $FlowSuppressError: The following line is borked because of https://github.com/facebook/flow/issues/7309\n        return state.mergeIn([authedUserId, 'answers'], {\n          [questionId]: optionKey,\n        });\n      }\n      throw new Error('unexpected empty payload');\n    }\n\n    case ADD_QUESTION_TO_USER: {\n      const payload: AddQuestionToUserPayload | void = action.payload;\n      if (payload) {\n        const { authedUserId, questionId } = payload;\n        // $FlowSuppressError: The following line is borked because of https://github.com/facebook/flow/issues/7309\n        return state.updateIn(\n          [authedUserId, 'questions'],\n          (list: List<string>) => list.push(questionId),\n        );\n      }\n      throw new Error('unexpected empty payload');\n    }\n\n    case INIT_USERS: {\n      const payload: InitUsersPayload | void = action.payload;\n      if (payload) {\n        const { users } = payload;\n        const usersMap: UsersMap = ((fromJS(users): any): UsersMap);\n        // $FlowSuppressError: The following line is borked because of https://github.com/facebook/flow/issues/7309\n        return state.merge(usersMap);\n      }\n      throw new Error('unexpected empty payload');\n    }\n\n    default:\n      (action: empty); // eslint-disable-line no-unused-expressions\n      return state;\n  }\n};\n\nexport default reducer;\n","// @flow\nimport { type Reducer } from 'redux';\nimport { combineReducers } from 'redux-immutable';\nimport { loadingBarReducer } from 'react-redux-loading-bar';\nimport authedUserId from './authedUserId';\nimport questions from './questions';\nimport status from './status';\nimport users from './users';\nimport {\n  type StateMap,\n  type StoreAction,\n} from '../types';\n\nconst reducers = {\n  authedUserId,\n  loadingBar: loadingBarReducer,\n  questions,\n  status,\n  users,\n};\n\nconst reducer: Reducer<StateMap, StoreAction> = combineReducers(reducers);\n\nexport default reducer;\n","// @flow\nimport { applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n// import logger from './logger';\n\n// eslint-disable-next-line no-underscore-dangle\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default composeEnhancers(applyMiddleware(\n  thunk,\n  // logger,\n));\n","// @flow\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, type Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport reducer from './reducers';\nimport middleware from './middleware';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport {\n  type StateMap,\n  type StoreAction,\n} from './types';\n\nconst store: Store<StateMap, StoreAction> = createStore(reducer, middleware);\nconst root: HTMLElement | null = document.getElementById('root');\n\nif (root) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    root,\n  );\n}\n"],"sourceRoot":""}